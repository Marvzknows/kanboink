generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  createdAt     DateTime       @default(now())
  first_name    String
  last_name     String
  middle_name   String?
  password      String
  updatedAt     DateTime       @updatedAt
  activeBoardId String?
  activities    ActivityLog[]
  ownedBoards   Board[]        @relation("BoardOwner")
  Card          Card[]
  cards         Card[]         @relation("CreatedCards")
  comments      Comment[]
  activeBoard   Board?         @relation(fields: [activeBoardId], references: [id])
  refreshTokens RefreshToken[]
  boards        Board[]        @relation("BoardMembers")

  @@index([activeBoardId], map: "User_activeBoardId_fkey")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @db.Text
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "refresh_tokens_userId_fkey")
  @@map("refresh_tokens")
}

model Board {
  id         String        @id @default(cuid())
  title      String
  ownerId    String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  activities ActivityLog[]
  owner      User          @relation("BoardOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  lists      List[]
  User       User[]
  members    User[]        @relation("BoardMembers")

  @@index([ownerId], map: "Board_ownerId_fkey")
}

model Card {
  id          String       @id @default(cuid())
  title       String
  description String?
  assigneeId  String?
  listId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  priority    PriorityList
  createdById String
  user        User?        @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
  createdBy   User         @relation("CreatedCards", fields: [createdById], references: [id], onDelete: Cascade)
  list        List         @relation(fields: [listId], references: [id], onDelete: Cascade)
  comments    Comment[]

  @@index([assigneeId], map: "Card_assigneeId_fkey")
  @@index([createdById], map: "Card_createdById_fkey")
  @@index([listId], map: "Card_listId_fkey")
}

model List {
  id        String   @id @default(cuid())
  title     String
  boardId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  position  Int
  cards     Card[]
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@index([boardId], map: "List_boardId_fkey")
}

model Comment {
  id          String   @id @default(uuid())
  userId      String
  cardId      String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  card        Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([cardId], map: "Comment_cardId_fkey")
  @@index([userId], map: "Comment_userId_fkey")
}

model ActivityLog {
  id        String         @id @default(uuid())
  action    ActivityAction
  details   Json?
  userId    String
  boardId   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  board     Board?         @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([boardId], map: "ActivityLog_boardId_fkey")
  @@index([userId], map: "ActivityLog_userId_fkey")
}

enum ActivityAction {
  CARD_CREATED
  CARD_UPDATED
  CARD_MOVED
  CARD_DELETED
  BOARD_CREATED
  BOARD_UPDATED
  BOARD_DELETED
  COMMENT_ADDED
  COMMENT_DELETED
}

enum PriorityList {
  LOW
  MEDIUM
  HIGH
  URGENT
}
